// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: dcim.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FilterOp int32

const (
	FilterOp_OP_EQUALS      FilterOp = 0
	FilterOp_OP_STARTS_WITH FilterOp = 1
	FilterOp_OP_ENDS_WITH   FilterOp = 2
	FilterOp_OP_CONTAINS    FilterOp = 3
	FilterOp_OP_EXISTS      FilterOp = 4
)

// Enum value maps for FilterOp.
var (
	FilterOp_name = map[int32]string{
		0: "OP_EQUALS",
		1: "OP_STARTS_WITH",
		2: "OP_ENDS_WITH",
		3: "OP_CONTAINS",
		4: "OP_EXISTS",
	}
	FilterOp_value = map[string]int32{
		"OP_EQUALS":      0,
		"OP_STARTS_WITH": 1,
		"OP_ENDS_WITH":   2,
		"OP_CONTAINS":    3,
		"OP_EXISTS":      4,
	}
)

func (x FilterOp) Enum() *FilterOp {
	p := new(FilterOp)
	*p = x
	return p
}

func (x FilterOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterOp) Descriptor() protoreflect.EnumDescriptor {
	return file_dcim_proto_enumTypes[0].Descriptor()
}

func (FilterOp) Type() protoreflect.EnumType {
	return &file_dcim_proto_enumTypes[0]
}

func (x FilterOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterOp.Descriptor instead.
func (FilterOp) EnumDescriptor() ([]byte, []int) {
	return file_dcim_proto_rawDescGZIP(), []int{0}
}

type ListenRequestLogs int32

const (
	ListenRequestLogs_LOGS_DISABLED ListenRequestLogs = 0
	ListenRequestLogs_LOGS_UNSLICED ListenRequestLogs = 1
	ListenRequestLogs_LOGS_RAW      ListenRequestLogs = 2
	ListenRequestLogs_LOGS_HTML     ListenRequestLogs = 3
)

// Enum value maps for ListenRequestLogs.
var (
	ListenRequestLogs_name = map[int32]string{
		0: "LOGS_DISABLED",
		1: "LOGS_UNSLICED",
		2: "LOGS_RAW",
		3: "LOGS_HTML",
	}
	ListenRequestLogs_value = map[string]int32{
		"LOGS_DISABLED": 0,
		"LOGS_UNSLICED": 1,
		"LOGS_RAW":      2,
		"LOGS_HTML":     3,
	}
)

func (x ListenRequestLogs) Enum() *ListenRequestLogs {
	p := new(ListenRequestLogs)
	*p = x
	return p
}

func (x ListenRequestLogs) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListenRequestLogs) Descriptor() protoreflect.EnumDescriptor {
	return file_dcim_proto_enumTypes[1].Descriptor()
}

func (ListenRequestLogs) Type() protoreflect.EnumType {
	return &file_dcim_proto_enumTypes[1]
}

func (x ListenRequestLogs) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListenRequestLogs.Descriptor instead.
func (ListenRequestLogs) EnumDescriptor() ([]byte, []int) {
	return file_dcim_proto_rawDescGZIP(), []int{1}
}

type RackTrigger int32

const (
	RackTrigger_TRIGGER_UNKNOWN RackTrigger = 0
	RackTrigger_TRIGGER_MANUAL  RackTrigger = 1
	RackTrigger_TRIGGER_PUSH    RackTrigger = 2
	RackTrigger_TRIGGER_DELETED RackTrigger = 3
)

// Enum value maps for RackTrigger.
var (
	RackTrigger_name = map[int32]string{
		0: "TRIGGER_UNKNOWN",
		1: "TRIGGER_MANUAL",
		2: "TRIGGER_PUSH",
		3: "TRIGGER_DELETED",
	}
	RackTrigger_value = map[string]int32{
		"TRIGGER_UNKNOWN": 0,
		"TRIGGER_MANUAL":  1,
		"TRIGGER_PUSH":    2,
		"TRIGGER_DELETED": 3,
	}
)

func (x RackTrigger) Enum() *RackTrigger {
	p := new(RackTrigger)
	*p = x
	return p
}

func (x RackTrigger) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RackTrigger) Descriptor() protoreflect.EnumDescriptor {
	return file_dcim_proto_enumTypes[2].Descriptor()
}

func (RackTrigger) Type() protoreflect.EnumType {
	return &file_dcim_proto_enumTypes[2]
}

func (x RackTrigger) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RackTrigger.Descriptor instead.
func (RackTrigger) EnumDescriptor() ([]byte, []int) {
	return file_dcim_proto_rawDescGZIP(), []int{2}
}

type RackPhase int32

const (
	// Unknown means we don't know what state the Rack is in
	RackPhase_PHASE_UNKNOWN RackPhase = 0
	// Preparing means the Rack hasn't started yet and isn't consuming resources in the system
	RackPhase_PHASE_PREPARING RackPhase = 1
	// Starting means the Rack has been scheduled and is waiting to run. Things that might prevent it
	// from running already are pod scheduling, image pull or container startup.
	RackPhase_PHASE_STARTING RackPhase = 2
	// Running means the Rack is actually running and doing work.
	RackPhase_PHASE_RUNNING RackPhase = 3
	// Done means the Rack has run and is finished
	RackPhase_PHASE_DONE RackPhase = 4
	// Cleaning means the Rack is in post-run cleanup
	RackPhase_PHASE_CLEANUP RackPhase = 5
	// Waiting means the Rack is waiting for its start time or some other condition to be met
	RackPhase_PHASE_WAITING RackPhase = 6
)

// Enum value maps for RackPhase.
var (
	RackPhase_name = map[int32]string{
		0: "PHASE_UNKNOWN",
		1: "PHASE_PREPARING",
		2: "PHASE_STARTING",
		3: "PHASE_RUNNING",
		4: "PHASE_DONE",
		5: "PHASE_CLEANUP",
		6: "PHASE_WAITING",
	}
	RackPhase_value = map[string]int32{
		"PHASE_UNKNOWN":   0,
		"PHASE_PREPARING": 1,
		"PHASE_STARTING":  2,
		"PHASE_RUNNING":   3,
		"PHASE_DONE":      4,
		"PHASE_CLEANUP":   5,
		"PHASE_WAITING":   6,
	}
)

func (x RackPhase) Enum() *RackPhase {
	p := new(RackPhase)
	*p = x
	return p
}

func (x RackPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RackPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_dcim_proto_enumTypes[3].Descriptor()
}

func (RackPhase) Type() protoreflect.EnumType {
	return &file_dcim_proto_enumTypes[3]
}

func (x RackPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RackPhase.Descriptor instead.
func (RackPhase) EnumDescriptor() ([]byte, []int) {
	return file_dcim_proto_rawDescGZIP(), []int{3}
}

type LogSliceType int32

const (
	LogSliceType_SLICE_ABANDONED LogSliceType = 0
	LogSliceType_SLICE_PHASE     LogSliceType = 1
	LogSliceType_SLICE_START     LogSliceType = 2
	LogSliceType_SLICE_CONTENT   LogSliceType = 3
	LogSliceType_SLICE_DONE      LogSliceType = 4
	LogSliceType_SLICE_FAIL      LogSliceType = 5
	LogSliceType_SLICE_RESULT    LogSliceType = 6
)

// Enum value maps for LogSliceType.
var (
	LogSliceType_name = map[int32]string{
		0: "SLICE_ABANDONED",
		1: "SLICE_PHASE",
		2: "SLICE_START",
		3: "SLICE_CONTENT",
		4: "SLICE_DONE",
		5: "SLICE_FAIL",
		6: "SLICE_RESULT",
	}
	LogSliceType_value = map[string]int32{
		"SLICE_ABANDONED": 0,
		"SLICE_PHASE":     1,
		"SLICE_START":     2,
		"SLICE_CONTENT":   3,
		"SLICE_DONE":      4,
		"SLICE_FAIL":      5,
		"SLICE_RESULT":    6,
	}
)

func (x LogSliceType) Enum() *LogSliceType {
	p := new(LogSliceType)
	*p = x
	return p
}

func (x LogSliceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogSliceType) Descriptor() protoreflect.EnumDescriptor {
	return file_dcim_proto_enumTypes[4].Descriptor()
}

func (LogSliceType) Type() protoreflect.EnumType {
	return &file_dcim_proto_enumTypes[4]
}

func (x LogSliceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogSliceType.Descriptor instead.
func (LogSliceType) EnumDescriptor() ([]byte, []int) {
	return file_dcim_proto_rawDescGZIP(), []int{4}
}

type StartLocalRackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//	*StartLocalRackRequest_Metadata
	//	*StartLocalRackRequest_ConfigYaml
	//	*StartLocalRackRequest_RackYaml
	//	*StartLocalRackRequest_ApplicationTar
	//	*StartLocalRackRequest_ApplicationTarDone
	Content isStartLocalRackRequest_Content `protobuf_oneof:"content"`
}

func (x *StartLocalRackRequest) Reset() {
	*x = StartLocalRackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcim_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartLocalRackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartLocalRackRequest) ProtoMessage() {}

func (x *StartLocalRackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcim_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartLocalRackRequest.ProtoReflect.Descriptor instead.
func (*StartLocalRackRequest) Descriptor() ([]byte, []int) {
	return file_dcim_proto_rawDescGZIP(), []int{0}
}

func (m *StartLocalRackRequest) GetContent() isStartLocalRackRequest_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *StartLocalRackRequest) GetMetadata() *RackMetadata {
	if x, ok := x.GetContent().(*StartLocalRackRequest_Metadata); ok {
		return x.Metadata
	}
	return nil
}

func (x *StartLocalRackRequest) GetConfigYaml() []byte {
	if x, ok := x.GetContent().(*StartLocalRackRequest_ConfigYaml); ok {
		return x.ConfigYaml
	}
	return nil
}

func (x *StartLocalRackRequest) GetRackYaml() []byte {
	if x, ok := x.GetContent().(*StartLocalRackRequest_RackYaml); ok {
		return x.RackYaml
	}
	return nil
}

func (x *StartLocalRackRequest) GetApplicationTar() []byte {
	if x, ok := x.GetContent().(*StartLocalRackRequest_ApplicationTar); ok {
		return x.ApplicationTar
	}
	return nil
}

func (x *StartLocalRackRequest) GetApplicationTarDone() bool {
	if x, ok := x.GetContent().(*StartLocalRackRequest_ApplicationTarDone); ok {
		return x.ApplicationTarDone
	}
	return false
}

type isStartLocalRackRequest_Content interface {
	isStartLocalRackRequest_Content()
}

type StartLocalRackRequest_Metadata struct {
	Metadata *RackMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,oneof"`
}

type StartLocalRackRequest_ConfigYaml struct {
	ConfigYaml []byte `protobuf:"bytes,2,opt,name=config_yaml,json=configYaml,proto3,oneof"`
}

type StartLocalRackRequest_RackYaml struct {
	RackYaml []byte `protobuf:"bytes,3,opt,name=rack_yaml,json=rackYaml,proto3,oneof"`
}

type StartLocalRackRequest_ApplicationTar struct {
	ApplicationTar []byte `protobuf:"bytes,4,opt,name=application_tar,json=applicationTar,proto3,oneof"`
}

type StartLocalRackRequest_ApplicationTarDone struct {
	ApplicationTarDone bool `protobuf:"varint,5,opt,name=application_tar_done,json=applicationTarDone,proto3,oneof"`
}

func (*StartLocalRackRequest_Metadata) isStartLocalRackRequest_Content() {}

func (*StartLocalRackRequest_ConfigYaml) isStartLocalRackRequest_Content() {}

func (*StartLocalRackRequest_RackYaml) isStartLocalRackRequest_Content() {}

func (*StartLocalRackRequest_ApplicationTar) isStartLocalRackRequest_Content() {}

func (*StartLocalRackRequest_ApplicationTarDone) isStartLocalRackRequest_Content() {}

type StartRackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *RackStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *StartRackResponse) Reset() {
	*x = StartRackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcim_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRackResponse) ProtoMessage() {}

func (x *StartRackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcim_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRackResponse.ProtoReflect.Descriptor instead.
func (*StartRackResponse) Descriptor() ([]byte, []int) {
	return file_dcim_proto_rawDescGZIP(), []int{1}
}

func (x *StartRackResponse) GetStatus() *RackStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type StartRackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata   *RackMetadata          `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	RackPath   string                 `protobuf:"bytes,2,opt,name=rack_path,json=rackPath,proto3" json:"rack_path,omitempty"`
	RackYaml   []byte                 `protobuf:"bytes,3,opt,name=rack_yaml,json=rackYaml,proto3" json:"rack_yaml,omitempty"`
	Sideload   []byte                 `protobuf:"bytes,4,opt,name=sideload,proto3" json:"sideload,omitempty"`
	WaitUntil  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=wait_until,json=waitUntil,proto3" json:"wait_until,omitempty"`
	NameSuffix string                 `protobuf:"bytes,6,opt,name=name_suffix,json=nameSuffix,proto3" json:"name_suffix,omitempty"`
}

func (x *StartRackRequest) Reset() {
	*x = StartRackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcim_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRackRequest) ProtoMessage() {}

func (x *StartRackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcim_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRackRequest.ProtoReflect.Descriptor instead.
func (*StartRackRequest) Descriptor() ([]byte, []int) {
	return file_dcim_proto_rawDescGZIP(), []int{2}
}

func (x *StartRackRequest) GetMetadata() *RackMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *StartRackRequest) GetRackPath() string {
	if x != nil {
		return x.RackPath
	}
	return ""
}

func (x *StartRackRequest) GetRackYaml() []byte {
	if x != nil {
		return x.RackYaml
	}
	return nil
}

func (x *StartRackRequest) GetSideload() []byte {
	if x != nil {
		return x.Sideload
	}
	return nil
}

func (x *StartRackRequest) GetWaitUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.WaitUntil
	}
	return nil
}

func (x *StartRackRequest) GetNameSuffix() string {
	if x != nil {
		return x.NameSuffix
	}
	return ""
}

type StartFromPreviousRackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreviousRack string                 `protobuf:"bytes,1,opt,name=previous_rack,json=previousRack,proto3" json:"previous_rack,omitempty"`
	GitopsToken  string                 `protobuf:"bytes,2,opt,name=gitops_token,json=gitopsToken,proto3" json:"gitops_token,omitempty"`
	WaitUntil    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=wait_until,json=waitUntil,proto3" json:"wait_until,omitempty"`
}

func (x *StartFromPreviousRackRequest) Reset() {
	*x = StartFromPreviousRackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcim_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartFromPreviousRackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartFromPreviousRackRequest) ProtoMessage() {}

func (x *StartFromPreviousRackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcim_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartFromPreviousRackRequest.ProtoReflect.Descriptor instead.
func (*StartFromPreviousRackRequest) Descriptor() ([]byte, []int) {
	return file_dcim_proto_rawDescGZIP(), []int{3}
}

func (x *StartFromPreviousRackRequest) GetPreviousRack() string {
	if x != nil {
		return x.PreviousRack
	}
	return ""
}

func (x *StartFromPreviousRackRequest) GetGitopsToken() string {
	if x != nil {
		return x.GitopsToken
	}
	return ""
}

func (x *StartFromPreviousRackRequest) GetWaitUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.WaitUntil
	}
	return nil
}

type ListRacksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter []*FilterExpression `protobuf:"bytes,1,rep,name=filter,proto3" json:"filter,omitempty"`
	Order  []*OrderExpression  `protobuf:"bytes,2,rep,name=order,proto3" json:"order,omitempty"`
	Start  int32               `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	Limit  int32               `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListRacksRequest) Reset() {
	*x = ListRacksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcim_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRacksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRacksRequest) ProtoMessage() {}

func (x *ListRacksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcim_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRacksRequest.ProtoReflect.Descriptor instead.
func (*ListRacksRequest) Descriptor() ([]byte, []int) {
	return file_dcim_proto_rawDescGZIP(), []int{4}
}

func (x *ListRacksRequest) GetFilter() []*FilterExpression {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListRacksRequest) GetOrder() []*OrderExpression {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *ListRacksRequest) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ListRacksRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type FilterExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Terms []*FilterTerm `protobuf:"bytes,1,rep,name=terms,proto3" json:"terms,omitempty"`
}

func (x *FilterExpression) Reset() {
	*x = FilterExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcim_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterExpression) ProtoMessage() {}

func (x *FilterExpression) ProtoReflect() protoreflect.Message {
	mi := &file_dcim_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterExpression.ProtoReflect.Descriptor instead.
func (*FilterExpression) Descriptor() ([]byte, []int) {
	return file_dcim_proto_rawDescGZIP(), []int{5}
}

func (x *FilterExpression) GetTerms() []*FilterTerm {
	if x != nil {
		return x.Terms
	}
	return nil
}

type FilterTerm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field     string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Value     string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Operation FilterOp `protobuf:"varint,3,opt,name=operation,proto3,enum=v1.FilterOp" json:"operation,omitempty"`
	Negate    bool     `protobuf:"varint,4,opt,name=negate,proto3" json:"negate,omitempty"`
}

func (x *FilterTerm) Reset() {
	*x = FilterTerm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcim_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTerm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTerm) ProtoMessage() {}

func (x *FilterTerm) ProtoReflect() protoreflect.Message {
	mi := &file_dcim_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTerm.ProtoReflect.Descriptor instead.
func (*FilterTerm) Descriptor() ([]byte, []int) {
	return file_dcim_proto_rawDescGZIP(), []int{6}
}

func (x *FilterTerm) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *FilterTerm) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *FilterTerm) GetOperation() FilterOp {
	if x != nil {
		return x.Operation
	}
	return FilterOp_OP_EQUALS
}

func (x *FilterTerm) GetNegate() bool {
	if x != nil {
		return x.Negate
	}
	return false
}

type OrderExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field     string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Ascending bool   `protobuf:"varint,2,opt,name=ascending,proto3" json:"ascending,omitempty"`
}

func (x *OrderExpression) Reset() {
	*x = OrderExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcim_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderExpression) ProtoMessage() {}

func (x *OrderExpression) ProtoReflect() protoreflect.Message {
	mi := &file_dcim_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderExpression.ProtoReflect.Descriptor instead.
func (*OrderExpression) Descriptor() ([]byte, []int) {
	return file_dcim_proto_rawDescGZIP(), []int{7}
}

func (x *OrderExpression) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *OrderExpression) GetAscending() bool {
	if x != nil {
		return x.Ascending
	}
	return false
}

type ListRacksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total  int32         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Result []*RackStatus `protobuf:"bytes,2,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *ListRacksResponse) Reset() {
	*x = ListRacksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcim_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRacksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRacksResponse) ProtoMessage() {}

func (x *ListRacksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcim_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRacksResponse.ProtoReflect.Descriptor instead.
func (*ListRacksResponse) Descriptor() ([]byte, []int) {
	return file_dcim_proto_rawDescGZIP(), []int{8}
}

func (x *ListRacksResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListRacksResponse) GetResult() []*RackStatus {
	if x != nil {
		return x.Result
	}
	return nil
}

type SubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter []*FilterExpression `protobuf:"bytes,1,rep,name=filter,proto3" json:"filter,omitempty"`
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcim_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcim_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_dcim_proto_rawDescGZIP(), []int{9}
}

func (x *SubscribeRequest) GetFilter() []*FilterExpression {
	if x != nil {
		return x.Filter
	}
	return nil
}

type SubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *RackStatus `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SubscribeResponse) Reset() {
	*x = SubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcim_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResponse) ProtoMessage() {}

func (x *SubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcim_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeResponse.ProtoReflect.Descriptor instead.
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return file_dcim_proto_rawDescGZIP(), []int{10}
}

func (x *SubscribeResponse) GetResult() *RackStatus {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetRackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetRackRequest) Reset() {
	*x = GetRackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcim_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRackRequest) ProtoMessage() {}

func (x *GetRackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcim_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRackRequest.ProtoReflect.Descriptor instead.
func (*GetRackRequest) Descriptor() ([]byte, []int) {
	return file_dcim_proto_rawDescGZIP(), []int{11}
}

func (x *GetRackRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetRackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *RackStatus `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *GetRackResponse) Reset() {
	*x = GetRackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcim_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRackResponse) ProtoMessage() {}

func (x *GetRackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcim_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRackResponse.ProtoReflect.Descriptor instead.
func (*GetRackResponse) Descriptor() ([]byte, []int) {
	return file_dcim_proto_rawDescGZIP(), []int{12}
}

func (x *GetRackResponse) GetResult() *RackStatus {
	if x != nil {
		return x.Result
	}
	return nil
}

type ListenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Updates bool              `protobuf:"varint,2,opt,name=updates,proto3" json:"updates,omitempty"`
	Logs    ListenRequestLogs `protobuf:"varint,3,opt,name=logs,proto3,enum=v1.ListenRequestLogs" json:"logs,omitempty"`
}

func (x *ListenRequest) Reset() {
	*x = ListenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcim_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenRequest) ProtoMessage() {}

func (x *ListenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcim_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenRequest.ProtoReflect.Descriptor instead.
func (*ListenRequest) Descriptor() ([]byte, []int) {
	return file_dcim_proto_rawDescGZIP(), []int{13}
}

func (x *ListenRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListenRequest) GetUpdates() bool {
	if x != nil {
		return x.Updates
	}
	return false
}

func (x *ListenRequest) GetLogs() ListenRequestLogs {
	if x != nil {
		return x.Logs
	}
	return ListenRequestLogs_LOGS_DISABLED
}

type ListenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//	*ListenResponse_Update
	//	*ListenResponse_Slice
	Content isListenResponse_Content `protobuf_oneof:"content"`
}

func (x *ListenResponse) Reset() {
	*x = ListenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcim_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenResponse) ProtoMessage() {}

func (x *ListenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcim_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenResponse.ProtoReflect.Descriptor instead.
func (*ListenResponse) Descriptor() ([]byte, []int) {
	return file_dcim_proto_rawDescGZIP(), []int{14}
}

func (m *ListenResponse) GetContent() isListenResponse_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *ListenResponse) GetUpdate() *RackStatus {
	if x, ok := x.GetContent().(*ListenResponse_Update); ok {
		return x.Update
	}
	return nil
}

func (x *ListenResponse) GetSlice() *LogSliceEvent {
	if x, ok := x.GetContent().(*ListenResponse_Slice); ok {
		return x.Slice
	}
	return nil
}

type isListenResponse_Content interface {
	isListenResponse_Content()
}

type ListenResponse_Update struct {
	Update *RackStatus `protobuf:"bytes,1,opt,name=update,proto3,oneof"`
}

type ListenResponse_Slice struct {
	Slice *LogSliceEvent `protobuf:"bytes,2,opt,name=slice,proto3,oneof"`
}

func (*ListenResponse_Update) isListenResponse_Content() {}

func (*ListenResponse_Slice) isListenResponse_Content() {}

type RackStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Metadata   *RackMetadata   `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Phase      RackPhase       `protobuf:"varint,3,opt,name=phase,proto3,enum=v1.RackPhase" json:"phase,omitempty"`
	Conditions *RackConditions `protobuf:"bytes,4,opt,name=conditions,proto3" json:"conditions,omitempty"`
	Details    string          `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
	Results    []*RackResult   `protobuf:"bytes,6,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *RackStatus) Reset() {
	*x = RackStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcim_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RackStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RackStatus) ProtoMessage() {}

func (x *RackStatus) ProtoReflect() protoreflect.Message {
	mi := &file_dcim_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RackStatus.ProtoReflect.Descriptor instead.
func (*RackStatus) Descriptor() ([]byte, []int) {
	return file_dcim_proto_rawDescGZIP(), []int{15}
}

func (x *RackStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RackStatus) GetMetadata() *RackMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RackStatus) GetPhase() RackPhase {
	if x != nil {
		return x.Phase
	}
	return RackPhase_PHASE_UNKNOWN
}

func (x *RackStatus) GetConditions() *RackConditions {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *RackStatus) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *RackStatus) GetResults() []*RackResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type RackMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner        string                 `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Repository   *Repository            `protobuf:"bytes,2,opt,name=repository,proto3" json:"repository,omitempty"`
	Trigger      RackTrigger            `protobuf:"varint,3,opt,name=trigger,proto3,enum=v1.RackTrigger" json:"trigger,omitempty"`
	Created      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	Finished     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=finished,proto3" json:"finished,omitempty"`
	Annotations  []*Annotation          `protobuf:"bytes,6,rep,name=annotations,proto3" json:"annotations,omitempty"`
	RackSpecName string                 `protobuf:"bytes,7,opt,name=rack_spec_name,json=rackSpecName,proto3" json:"rack_spec_name,omitempty"`
}

func (x *RackMetadata) Reset() {
	*x = RackMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcim_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RackMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RackMetadata) ProtoMessage() {}

func (x *RackMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_dcim_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RackMetadata.ProtoReflect.Descriptor instead.
func (*RackMetadata) Descriptor() ([]byte, []int) {
	return file_dcim_proto_rawDescGZIP(), []int{16}
}

func (x *RackMetadata) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *RackMetadata) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *RackMetadata) GetTrigger() RackTrigger {
	if x != nil {
		return x.Trigger
	}
	return RackTrigger_TRIGGER_UNKNOWN
}

func (x *RackMetadata) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *RackMetadata) GetFinished() *timestamppb.Timestamp {
	if x != nil {
		return x.Finished
	}
	return nil
}

func (x *RackMetadata) GetAnnotations() []*Annotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *RackMetadata) GetRackSpecName() string {
	if x != nil {
		return x.RackSpecName
	}
	return ""
}

type Repository struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host     string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Owner    string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Repo     string `protobuf:"bytes,3,opt,name=repo,proto3" json:"repo,omitempty"`
	Ref      string `protobuf:"bytes,4,opt,name=ref,proto3" json:"ref,omitempty"`
	Revision string `protobuf:"bytes,5,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *Repository) Reset() {
	*x = Repository{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcim_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Repository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repository) ProtoMessage() {}

func (x *Repository) ProtoReflect() protoreflect.Message {
	mi := &file_dcim_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repository.ProtoReflect.Descriptor instead.
func (*Repository) Descriptor() ([]byte, []int) {
	return file_dcim_proto_rawDescGZIP(), []int{17}
}

func (x *Repository) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Repository) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Repository) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *Repository) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *Repository) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

type Annotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Annotation) Reset() {
	*x = Annotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcim_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Annotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotation) ProtoMessage() {}

func (x *Annotation) ProtoReflect() protoreflect.Message {
	mi := &file_dcim_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotation.ProtoReflect.Descriptor instead.
func (*Annotation) Descriptor() ([]byte, []int) {
	return file_dcim_proto_rawDescGZIP(), []int{18}
}

func (x *Annotation) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Annotation) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type RackConditions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	FailureCount int32                  `protobuf:"varint,2,opt,name=failure_count,json=failureCount,proto3" json:"failure_count,omitempty"`
	CanReplay    bool                   `protobuf:"varint,3,opt,name=can_replay,json=canReplay,proto3" json:"can_replay,omitempty"`
	WaitUntil    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=wait_until,json=waitUntil,proto3" json:"wait_until,omitempty"`
	DidExecute   bool                   `protobuf:"varint,5,opt,name=did_execute,json=didExecute,proto3" json:"did_execute,omitempty"`
}

func (x *RackConditions) Reset() {
	*x = RackConditions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcim_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RackConditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RackConditions) ProtoMessage() {}

func (x *RackConditions) ProtoReflect() protoreflect.Message {
	mi := &file_dcim_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RackConditions.ProtoReflect.Descriptor instead.
func (*RackConditions) Descriptor() ([]byte, []int) {
	return file_dcim_proto_rawDescGZIP(), []int{19}
}

func (x *RackConditions) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RackConditions) GetFailureCount() int32 {
	if x != nil {
		return x.FailureCount
	}
	return 0
}

func (x *RackConditions) GetCanReplay() bool {
	if x != nil {
		return x.CanReplay
	}
	return false
}

func (x *RackConditions) GetWaitUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.WaitUntil
	}
	return nil
}

func (x *RackConditions) GetDidExecute() bool {
	if x != nil {
		return x.DidExecute
	}
	return false
}

type RackResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Payload     string   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Description string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Channels    []string `protobuf:"bytes,4,rep,name=channels,proto3" json:"channels,omitempty"`
}

func (x *RackResult) Reset() {
	*x = RackResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcim_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RackResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RackResult) ProtoMessage() {}

func (x *RackResult) ProtoReflect() protoreflect.Message {
	mi := &file_dcim_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RackResult.ProtoReflect.Descriptor instead.
func (*RackResult) Descriptor() ([]byte, []int) {
	return file_dcim_proto_rawDescGZIP(), []int{20}
}

func (x *RackResult) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RackResult) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *RackResult) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RackResult) GetChannels() []string {
	if x != nil {
		return x.Channels
	}
	return nil
}

type LogSliceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type    LogSliceType `protobuf:"varint,2,opt,name=type,proto3,enum=v1.LogSliceType" json:"type,omitempty"`
	Payload string       `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *LogSliceEvent) Reset() {
	*x = LogSliceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcim_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogSliceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogSliceEvent) ProtoMessage() {}

func (x *LogSliceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcim_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogSliceEvent.ProtoReflect.Descriptor instead.
func (*LogSliceEvent) Descriptor() ([]byte, []int) {
	return file_dcim_proto_rawDescGZIP(), []int{21}
}

func (x *LogSliceEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LogSliceEvent) GetType() LogSliceType {
	if x != nil {
		return x.Type
	}
	return LogSliceType_SLICE_ABANDONED
}

func (x *LogSliceEvent) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

type StopRackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *StopRackRequest) Reset() {
	*x = StopRackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcim_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopRackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRackRequest) ProtoMessage() {}

func (x *StopRackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcim_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRackRequest.ProtoReflect.Descriptor instead.
func (*StopRackRequest) Descriptor() ([]byte, []int) {
	return file_dcim_proto_rawDescGZIP(), []int{22}
}

func (x *StopRackRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StopRackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopRackResponse) Reset() {
	*x = StopRackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcim_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopRackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRackResponse) ProtoMessage() {}

func (x *StopRackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcim_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRackResponse.ProtoReflect.Descriptor instead.
func (*StopRackResponse) Descriptor() ([]byte, []int) {
	return file_dcim_proto_rawDescGZIP(), []int{23}
}

var File_dcim_proto protoreflect.FileDescriptor

var file_dcim_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x64, 0x63, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xf3, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x52, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x59, 0x61, 0x6d, 0x6c, 0x12, 0x1d,
	0x0a, 0x09, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x08, 0x72, 0x61, 0x63, 0x6b, 0x59, 0x61, 0x6d, 0x6c, 0x12, 0x29, 0x0a,
	0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x5f, 0x64, 0x6f, 0x6e, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x44, 0x6f, 0x6e, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x3b, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xf2, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x63, 0x6b, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x63, 0x6b,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x79, 0x61, 0x6d,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x61, 0x63, 0x6b, 0x59, 0x61, 0x6d,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x64, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x69, 0x64, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x39, 0x0a,
	0x0a, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x77,
	0x61, 0x69, 0x74, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e,
	0x61, 0x6d, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x22, 0xa1, 0x01, 0x0a, 0x1c, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x52,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x61, 0x63, 0x6b, 0x12,
	0x21, 0x0a, 0x0c, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x77, 0x61, 0x69, 0x74, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x22, 0x97, 0x01,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x29, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x38, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x05, 0x74,
	0x65, 0x72, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d,
	0x73, 0x22, 0x7c, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x22,
	0x45, 0x0a, 0x0f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x73, 0x63, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x73, 0x63,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x51, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61,
	0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x40, 0x0a, 0x10, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x3b, 0x0a, 0x11, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x24, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x39,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x68, 0x0a, 0x0d, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x04, 0x6c,
	0x6f, 0x67, 0x73, 0x22, 0x70, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x29, 0x0a, 0x05, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x05, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xeb, 0x01, 0x0a, 0x0a, 0x52, 0x61, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x22, 0xc5, 0x02, 0x0a, 0x0c, 0x52, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x0a, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x07, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x61, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x78, 0x0a, 0x0a, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x34, 0x0a, 0x0a, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x0e,
	0x52, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x39, 0x0a, 0x0a,
	0x77, 0x61, 0x69, 0x74, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x77, 0x61,
	0x69, 0x74, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x64, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x69,
	0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x22, 0x78, 0x0a, 0x0a, 0x52, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x22, 0x63, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x25, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x70, 0x52,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x12,
	0x0a, 0x10, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2a, 0x5f, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x12, 0x0d,
	0x0a, 0x09, 0x4f, 0x50, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x4f, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x50, 0x5f, 0x45, 0x4e, 0x44, 0x53, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49,
	0x4e, 0x53, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x50, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x53, 0x10, 0x04, 0x2a, 0x56, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x47, 0x53,
	0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4c,
	0x4f, 0x47, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x4c, 0x49, 0x43, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x4c, 0x4f, 0x47, 0x53, 0x5f, 0x52, 0x41, 0x57, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x4c, 0x4f, 0x47, 0x53, 0x5f, 0x48, 0x54, 0x4d, 0x4c, 0x10, 0x03, 0x2a, 0x5d, 0x0a, 0x0b, 0x52,
	0x61, 0x63, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52,
	0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x50,
	0x55, 0x53, 0x48, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x90, 0x01, 0x0a, 0x09, 0x52,
	0x61, 0x63, 0x6b, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x48, 0x41, 0x53,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50,
	0x48, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x55,
	0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x48, 0x41, 0x53, 0x45,
	0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x48, 0x41, 0x53, 0x45,
	0x5f, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x48,
	0x41, 0x53, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x2a, 0x8a, 0x01,
	0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x4c, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x42, 0x41, 0x4e, 0x44, 0x4f, 0x4e, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x4c, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x48, 0x41,
	0x53, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x4c, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x4c, 0x49, 0x43, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x4c, 0x49, 0x43,
	0x45, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x4c, 0x49, 0x43,
	0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4c, 0x49, 0x43,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x06, 0x32, 0x83, 0x04, 0x0a, 0x0b, 0x44,
	0x63, 0x69, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x61, 0x63, 0x6b, 0x12, 0x19, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x28, 0x01, 0x12, 0x52, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x61, 0x63, 0x6b, 0x12, 0x20, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x61, 0x63, 0x6b, 0x12, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3a, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x73, 0x12,
	0x14, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c,
	0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x14, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x34, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x12, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x33, 0x0a, 0x06, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x12, 0x11, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x37, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x70, 0x52,
	0x61, 0x63, 0x6b, 0x12, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x6f, 0x70, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x24, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62,
	0x68, 0x6f, 0x6a, 0x70, 0x75, 0x72, 0x2f, 0x64, 0x63, 0x69, 0x6d, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dcim_proto_rawDescOnce sync.Once
	file_dcim_proto_rawDescData = file_dcim_proto_rawDesc
)

func file_dcim_proto_rawDescGZIP() []byte {
	file_dcim_proto_rawDescOnce.Do(func() {
		file_dcim_proto_rawDescData = protoimpl.X.CompressGZIP(file_dcim_proto_rawDescData)
	})
	return file_dcim_proto_rawDescData
}

var file_dcim_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_dcim_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_dcim_proto_goTypes = []interface{}{
	(FilterOp)(0),                        // 0: v1.FilterOp
	(ListenRequestLogs)(0),               // 1: v1.ListenRequestLogs
	(RackTrigger)(0),                     // 2: v1.RackTrigger
	(RackPhase)(0),                       // 3: v1.RackPhase
	(LogSliceType)(0),                    // 4: v1.LogSliceType
	(*StartLocalRackRequest)(nil),        // 5: v1.StartLocalRackRequest
	(*StartRackResponse)(nil),            // 6: v1.StartRackResponse
	(*StartRackRequest)(nil),             // 7: v1.StartRackRequest
	(*StartFromPreviousRackRequest)(nil), // 8: v1.StartFromPreviousRackRequest
	(*ListRacksRequest)(nil),             // 9: v1.ListRacksRequest
	(*FilterExpression)(nil),             // 10: v1.FilterExpression
	(*FilterTerm)(nil),                   // 11: v1.FilterTerm
	(*OrderExpression)(nil),              // 12: v1.OrderExpression
	(*ListRacksResponse)(nil),            // 13: v1.ListRacksResponse
	(*SubscribeRequest)(nil),             // 14: v1.SubscribeRequest
	(*SubscribeResponse)(nil),            // 15: v1.SubscribeResponse
	(*GetRackRequest)(nil),               // 16: v1.GetRackRequest
	(*GetRackResponse)(nil),              // 17: v1.GetRackResponse
	(*ListenRequest)(nil),                // 18: v1.ListenRequest
	(*ListenResponse)(nil),               // 19: v1.ListenResponse
	(*RackStatus)(nil),                   // 20: v1.RackStatus
	(*RackMetadata)(nil),                 // 21: v1.RackMetadata
	(*Repository)(nil),                   // 22: v1.Repository
	(*Annotation)(nil),                   // 23: v1.Annotation
	(*RackConditions)(nil),               // 24: v1.RackConditions
	(*RackResult)(nil),                   // 25: v1.RackResult
	(*LogSliceEvent)(nil),                // 26: v1.LogSliceEvent
	(*StopRackRequest)(nil),              // 27: v1.StopRackRequest
	(*StopRackResponse)(nil),             // 28: v1.StopRackResponse
	(*timestamppb.Timestamp)(nil),        // 29: google.protobuf.Timestamp
}
var file_dcim_proto_depIdxs = []int32{
	21, // 0: v1.StartLocalRackRequest.metadata:type_name -> v1.RackMetadata
	20, // 1: v1.StartRackResponse.status:type_name -> v1.RackStatus
	21, // 2: v1.StartRackRequest.metadata:type_name -> v1.RackMetadata
	29, // 3: v1.StartRackRequest.wait_until:type_name -> google.protobuf.Timestamp
	29, // 4: v1.StartFromPreviousRackRequest.wait_until:type_name -> google.protobuf.Timestamp
	10, // 5: v1.ListRacksRequest.filter:type_name -> v1.FilterExpression
	12, // 6: v1.ListRacksRequest.order:type_name -> v1.OrderExpression
	11, // 7: v1.FilterExpression.terms:type_name -> v1.FilterTerm
	0,  // 8: v1.FilterTerm.operation:type_name -> v1.FilterOp
	20, // 9: v1.ListRacksResponse.result:type_name -> v1.RackStatus
	10, // 10: v1.SubscribeRequest.filter:type_name -> v1.FilterExpression
	20, // 11: v1.SubscribeResponse.result:type_name -> v1.RackStatus
	20, // 12: v1.GetRackResponse.result:type_name -> v1.RackStatus
	1,  // 13: v1.ListenRequest.logs:type_name -> v1.ListenRequestLogs
	20, // 14: v1.ListenResponse.update:type_name -> v1.RackStatus
	26, // 15: v1.ListenResponse.slice:type_name -> v1.LogSliceEvent
	21, // 16: v1.RackStatus.metadata:type_name -> v1.RackMetadata
	3,  // 17: v1.RackStatus.phase:type_name -> v1.RackPhase
	24, // 18: v1.RackStatus.conditions:type_name -> v1.RackConditions
	25, // 19: v1.RackStatus.results:type_name -> v1.RackResult
	22, // 20: v1.RackMetadata.repository:type_name -> v1.Repository
	2,  // 21: v1.RackMetadata.trigger:type_name -> v1.RackTrigger
	29, // 22: v1.RackMetadata.created:type_name -> google.protobuf.Timestamp
	29, // 23: v1.RackMetadata.finished:type_name -> google.protobuf.Timestamp
	23, // 24: v1.RackMetadata.annotations:type_name -> v1.Annotation
	29, // 25: v1.RackConditions.wait_until:type_name -> google.protobuf.Timestamp
	4,  // 26: v1.LogSliceEvent.type:type_name -> v1.LogSliceType
	5,  // 27: v1.DcimService.StartLocalRack:input_type -> v1.StartLocalRackRequest
	8,  // 28: v1.DcimService.StartFromPreviousRack:input_type -> v1.StartFromPreviousRackRequest
	7,  // 29: v1.DcimService.StartRack:input_type -> v1.StartRackRequest
	9,  // 30: v1.DcimService.ListRacks:input_type -> v1.ListRacksRequest
	14, // 31: v1.DcimService.Subscribe:input_type -> v1.SubscribeRequest
	16, // 32: v1.DcimService.GetRack:input_type -> v1.GetRackRequest
	18, // 33: v1.DcimService.Listen:input_type -> v1.ListenRequest
	27, // 34: v1.DcimService.StopRack:input_type -> v1.StopRackRequest
	6,  // 35: v1.DcimService.StartLocalRack:output_type -> v1.StartRackResponse
	6,  // 36: v1.DcimService.StartFromPreviousRack:output_type -> v1.StartRackResponse
	6,  // 37: v1.DcimService.StartRack:output_type -> v1.StartRackResponse
	13, // 38: v1.DcimService.ListRacks:output_type -> v1.ListRacksResponse
	15, // 39: v1.DcimService.Subscribe:output_type -> v1.SubscribeResponse
	17, // 40: v1.DcimService.GetRack:output_type -> v1.GetRackResponse
	19, // 41: v1.DcimService.Listen:output_type -> v1.ListenResponse
	28, // 42: v1.DcimService.StopRack:output_type -> v1.StopRackResponse
	35, // [35:43] is the sub-list for method output_type
	27, // [27:35] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_dcim_proto_init() }
func file_dcim_proto_init() {
	if File_dcim_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dcim_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartLocalRackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcim_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcim_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcim_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartFromPreviousRackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcim_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRacksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcim_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcim_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTerm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcim_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcim_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRacksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcim_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcim_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcim_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcim_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcim_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcim_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcim_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RackStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcim_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RackMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcim_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Repository); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcim_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Annotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcim_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RackConditions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcim_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RackResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcim_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogSliceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcim_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopRackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcim_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopRackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dcim_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*StartLocalRackRequest_Metadata)(nil),
		(*StartLocalRackRequest_ConfigYaml)(nil),
		(*StartLocalRackRequest_RackYaml)(nil),
		(*StartLocalRackRequest_ApplicationTar)(nil),
		(*StartLocalRackRequest_ApplicationTarDone)(nil),
	}
	file_dcim_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*ListenResponse_Update)(nil),
		(*ListenResponse_Slice)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dcim_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dcim_proto_goTypes,
		DependencyIndexes: file_dcim_proto_depIdxs,
		EnumInfos:         file_dcim_proto_enumTypes,
		MessageInfos:      file_dcim_proto_msgTypes,
	}.Build()
	File_dcim_proto = out.File
	file_dcim_proto_rawDesc = nil
	file_dcim_proto_goTypes = nil
	file_dcim_proto_depIdxs = nil
}
